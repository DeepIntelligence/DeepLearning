syntax = "proto2";
package DeepLearning;
message NeuralNetParameter {
	optional string name = 1;
	optional string type = 2;
	enum ActivationType {sigmoid = 1; tanh = 2; linear = 3; softmax = 4; ReLU = 5;}
	repeated LayerStructParameter layerStruct = 100;
	optional NeuralNetTrainingParameter neuralNetTrainingParameter= 101;
	optional RNNStructParameter rnnStruct = 102;
	
}

message ReinforcementLearningParameter{
	optional QLearningSolverParameter qLearningSolverParameter= 100;
}

message LayerStructParameter {
	optional int32 inputDim = 1;
	optional int32 outputDim = 2;
	optional NeuralNetParameter.ActivationType activationType = 3;
	optional string name = 4;
	optional string type = 5;
	optional NeuralNetInitializerParameter init_W = 103;
	optional NeuralNetInitializerParameter init_B = 104;
	optional NeuralNetInitializerParameter init_W_one = 105;
	optional NeuralNetInitializerParameter init_W_two = 106;	
}

message RNNStructParameter{
	optional int32 numHiddenLayers = 1;
	optional int32 hiddenLayerInputDim = 2;
	optional int32 hiddenLayerOutputDim = 3;
	optional int32 inputDim = 4;
	optional NeuralNetParameter.ActivationType activationType = 6;
	optional NeuralNetInitializerParameter init_W_one = 103;
	optional NeuralNetInitializerParameter init_B = 104;
	optional NeuralNetInitializerParameter init_W_two = 105;
}

message NeuralNetInitializerParameter{
	enum InitializerType {custom = 1; identity = 2; zero = 3; normal = 4; glorot_uniform = 5; IRNN = 6; orthogonal = 7;}
	optional double normal_std = 1;
	optional double normal_mean = 2;
	optional InitializerType initializerType = 3;
}

message NeuralNetTrainingParameter {
 enum TrainerType {SGD = 1; RMSProp = 2; SGDRNN=3;}
	optional double learningRate = 1;
	optional int32 maxIter = 2;
	optional int32 miniBatchSize = 3;
	optional int32 NEpoch = 4;
	optional double epi = 5 [default = 1e-6];
	optional TrainerType trainerType = 6 [default = SGD];
 	optional double decayRate = 7 [default = 10];
	optional double momentum = 8 [default = 0.9];
	optional bool verbose = 101 [default = true];
	optional int32 printInfoFrequency = 10 [default = 1];
	optional bool clipFlag = 11 [default = false];
	optional double clipThreshold = 12 [default = 1];
	optional double RMSProp_rho = 13 [default = 0.9];
	optional bool showGradNorm = 102 [default = false];
	optional bool RNNScanFlag = 103 [default = false];
	optional int32 RNNScanStep = 104 [default = 1];
	optional int32 RNNTruncateLength = 105 [default = 10];
}

message QLearningSolverParameter{
	optional int32 numTrainingEpisodes = 1;
	optional double learningRate = 2;
	optional double epsilon = 3;
	optional int32 EpisodeLength = 4;
	optional double discount = 5;
	optional int32 numEpisodesBeforeTraining = 6;
}
