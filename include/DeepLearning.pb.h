// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DeepLearning.proto

#ifndef PROTOBUF_DeepLearning_2eproto__INCLUDED
#define PROTOBUF_DeepLearning_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace DeepLearning {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DeepLearning_2eproto();
void protobuf_AssignDesc_DeepLearning_2eproto();
void protobuf_ShutdownFile_DeepLearning_2eproto();

class NeuralNetParameter;
class ReinforcementLearningParameter;
class LayerStructParameter;
class RNNStructParameter;
class NeuralNetInitializerParameter;
class NeuralNetTrainingParameter;
class QLearningSolverParameter;

enum NeuralNetParameter_ActivationType {
  NeuralNetParameter_ActivationType_sigmoid = 1,
  NeuralNetParameter_ActivationType_tanh = 2,
  NeuralNetParameter_ActivationType_linear = 3,
  NeuralNetParameter_ActivationType_softmax = 4,
  NeuralNetParameter_ActivationType_ReLU = 5
};
bool NeuralNetParameter_ActivationType_IsValid(int value);
const NeuralNetParameter_ActivationType NeuralNetParameter_ActivationType_ActivationType_MIN = NeuralNetParameter_ActivationType_sigmoid;
const NeuralNetParameter_ActivationType NeuralNetParameter_ActivationType_ActivationType_MAX = NeuralNetParameter_ActivationType_ReLU;
const int NeuralNetParameter_ActivationType_ActivationType_ARRAYSIZE = NeuralNetParameter_ActivationType_ActivationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NeuralNetParameter_ActivationType_descriptor();
inline const ::std::string& NeuralNetParameter_ActivationType_Name(NeuralNetParameter_ActivationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NeuralNetParameter_ActivationType_descriptor(), value);
}
inline bool NeuralNetParameter_ActivationType_Parse(
    const ::std::string& name, NeuralNetParameter_ActivationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NeuralNetParameter_ActivationType>(
    NeuralNetParameter_ActivationType_descriptor(), name, value);
}
enum NeuralNetInitializerParameter_InitializerType {
  NeuralNetInitializerParameter_InitializerType_custom = 1,
  NeuralNetInitializerParameter_InitializerType_identity = 2,
  NeuralNetInitializerParameter_InitializerType_zero = 3,
  NeuralNetInitializerParameter_InitializerType_normal = 4,
  NeuralNetInitializerParameter_InitializerType_glorot_uniform = 5,
  NeuralNetInitializerParameter_InitializerType_IRNN = 6,
  NeuralNetInitializerParameter_InitializerType_orthogonal = 7
};
bool NeuralNetInitializerParameter_InitializerType_IsValid(int value);
const NeuralNetInitializerParameter_InitializerType NeuralNetInitializerParameter_InitializerType_InitializerType_MIN = NeuralNetInitializerParameter_InitializerType_custom;
const NeuralNetInitializerParameter_InitializerType NeuralNetInitializerParameter_InitializerType_InitializerType_MAX = NeuralNetInitializerParameter_InitializerType_orthogonal;
const int NeuralNetInitializerParameter_InitializerType_InitializerType_ARRAYSIZE = NeuralNetInitializerParameter_InitializerType_InitializerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NeuralNetInitializerParameter_InitializerType_descriptor();
inline const ::std::string& NeuralNetInitializerParameter_InitializerType_Name(NeuralNetInitializerParameter_InitializerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NeuralNetInitializerParameter_InitializerType_descriptor(), value);
}
inline bool NeuralNetInitializerParameter_InitializerType_Parse(
    const ::std::string& name, NeuralNetInitializerParameter_InitializerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NeuralNetInitializerParameter_InitializerType>(
    NeuralNetInitializerParameter_InitializerType_descriptor(), name, value);
}
enum NeuralNetTrainingParameter_TrainerType {
  NeuralNetTrainingParameter_TrainerType_SGD = 1,
  NeuralNetTrainingParameter_TrainerType_RMSProp = 2,
  NeuralNetTrainingParameter_TrainerType_SGDRNN = 3
};
bool NeuralNetTrainingParameter_TrainerType_IsValid(int value);
const NeuralNetTrainingParameter_TrainerType NeuralNetTrainingParameter_TrainerType_TrainerType_MIN = NeuralNetTrainingParameter_TrainerType_SGD;
const NeuralNetTrainingParameter_TrainerType NeuralNetTrainingParameter_TrainerType_TrainerType_MAX = NeuralNetTrainingParameter_TrainerType_SGDRNN;
const int NeuralNetTrainingParameter_TrainerType_TrainerType_ARRAYSIZE = NeuralNetTrainingParameter_TrainerType_TrainerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NeuralNetTrainingParameter_TrainerType_descriptor();
inline const ::std::string& NeuralNetTrainingParameter_TrainerType_Name(NeuralNetTrainingParameter_TrainerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NeuralNetTrainingParameter_TrainerType_descriptor(), value);
}
inline bool NeuralNetTrainingParameter_TrainerType_Parse(
    const ::std::string& name, NeuralNetTrainingParameter_TrainerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NeuralNetTrainingParameter_TrainerType>(
    NeuralNetTrainingParameter_TrainerType_descriptor(), name, value);
}
// ===================================================================

class NeuralNetParameter : public ::google::protobuf::Message {
 public:
  NeuralNetParameter();
  virtual ~NeuralNetParameter();

  NeuralNetParameter(const NeuralNetParameter& from);

  inline NeuralNetParameter& operator=(const NeuralNetParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NeuralNetParameter& default_instance();

  void Swap(NeuralNetParameter* other);

  // implements Message ----------------------------------------------

  NeuralNetParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NeuralNetParameter& from);
  void MergeFrom(const NeuralNetParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NeuralNetParameter_ActivationType ActivationType;
  static const ActivationType sigmoid = NeuralNetParameter_ActivationType_sigmoid;
  static const ActivationType tanh = NeuralNetParameter_ActivationType_tanh;
  static const ActivationType linear = NeuralNetParameter_ActivationType_linear;
  static const ActivationType softmax = NeuralNetParameter_ActivationType_softmax;
  static const ActivationType ReLU = NeuralNetParameter_ActivationType_ReLU;
  static inline bool ActivationType_IsValid(int value) {
    return NeuralNetParameter_ActivationType_IsValid(value);
  }
  static const ActivationType ActivationType_MIN =
    NeuralNetParameter_ActivationType_ActivationType_MIN;
  static const ActivationType ActivationType_MAX =
    NeuralNetParameter_ActivationType_ActivationType_MAX;
  static const int ActivationType_ARRAYSIZE =
    NeuralNetParameter_ActivationType_ActivationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActivationType_descriptor() {
    return NeuralNetParameter_ActivationType_descriptor();
  }
  static inline const ::std::string& ActivationType_Name(ActivationType value) {
    return NeuralNetParameter_ActivationType_Name(value);
  }
  static inline bool ActivationType_Parse(const ::std::string& name,
      ActivationType* value) {
    return NeuralNetParameter_ActivationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // repeated .DeepLearning.LayerStructParameter layerStruct = 100;
  inline int layerstruct_size() const;
  inline void clear_layerstruct();
  static const int kLayerStructFieldNumber = 100;
  inline const ::DeepLearning::LayerStructParameter& layerstruct(int index) const;
  inline ::DeepLearning::LayerStructParameter* mutable_layerstruct(int index);
  inline ::DeepLearning::LayerStructParameter* add_layerstruct();
  inline const ::google::protobuf::RepeatedPtrField< ::DeepLearning::LayerStructParameter >&
      layerstruct() const;
  inline ::google::protobuf::RepeatedPtrField< ::DeepLearning::LayerStructParameter >*
      mutable_layerstruct();

  // optional .DeepLearning.NeuralNetTrainingParameter neuralNetTrainingParameter = 101;
  inline bool has_neuralnettrainingparameter() const;
  inline void clear_neuralnettrainingparameter();
  static const int kNeuralNetTrainingParameterFieldNumber = 101;
  inline const ::DeepLearning::NeuralNetTrainingParameter& neuralnettrainingparameter() const;
  inline ::DeepLearning::NeuralNetTrainingParameter* mutable_neuralnettrainingparameter();
  inline ::DeepLearning::NeuralNetTrainingParameter* release_neuralnettrainingparameter();
  inline void set_allocated_neuralnettrainingparameter(::DeepLearning::NeuralNetTrainingParameter* neuralnettrainingparameter);

  // optional .DeepLearning.RNNStructParameter rnnStruct = 102;
  inline bool has_rnnstruct() const;
  inline void clear_rnnstruct();
  static const int kRnnStructFieldNumber = 102;
  inline const ::DeepLearning::RNNStructParameter& rnnstruct() const;
  inline ::DeepLearning::RNNStructParameter* mutable_rnnstruct();
  inline ::DeepLearning::RNNStructParameter* release_rnnstruct();
  inline void set_allocated_rnnstruct(::DeepLearning::RNNStructParameter* rnnstruct);

  // @@protoc_insertion_point(class_scope:DeepLearning.NeuralNetParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_neuralnettrainingparameter();
  inline void clear_has_neuralnettrainingparameter();
  inline void set_has_rnnstruct();
  inline void clear_has_rnnstruct();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* type_;
  ::google::protobuf::RepeatedPtrField< ::DeepLearning::LayerStructParameter > layerstruct_;
  ::DeepLearning::NeuralNetTrainingParameter* neuralnettrainingparameter_;
  ::DeepLearning::RNNStructParameter* rnnstruct_;
  friend void  protobuf_AddDesc_DeepLearning_2eproto();
  friend void protobuf_AssignDesc_DeepLearning_2eproto();
  friend void protobuf_ShutdownFile_DeepLearning_2eproto();

  void InitAsDefaultInstance();
  static NeuralNetParameter* default_instance_;
};
// -------------------------------------------------------------------

class ReinforcementLearningParameter : public ::google::protobuf::Message {
 public:
  ReinforcementLearningParameter();
  virtual ~ReinforcementLearningParameter();

  ReinforcementLearningParameter(const ReinforcementLearningParameter& from);

  inline ReinforcementLearningParameter& operator=(const ReinforcementLearningParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReinforcementLearningParameter& default_instance();

  void Swap(ReinforcementLearningParameter* other);

  // implements Message ----------------------------------------------

  ReinforcementLearningParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReinforcementLearningParameter& from);
  void MergeFrom(const ReinforcementLearningParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DeepLearning.QLearningSolverParameter qLearningSolverParameter = 100;
  inline bool has_qlearningsolverparameter() const;
  inline void clear_qlearningsolverparameter();
  static const int kQLearningSolverParameterFieldNumber = 100;
  inline const ::DeepLearning::QLearningSolverParameter& qlearningsolverparameter() const;
  inline ::DeepLearning::QLearningSolverParameter* mutable_qlearningsolverparameter();
  inline ::DeepLearning::QLearningSolverParameter* release_qlearningsolverparameter();
  inline void set_allocated_qlearningsolverparameter(::DeepLearning::QLearningSolverParameter* qlearningsolverparameter);

  // @@protoc_insertion_point(class_scope:DeepLearning.ReinforcementLearningParameter)
 private:
  inline void set_has_qlearningsolverparameter();
  inline void clear_has_qlearningsolverparameter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DeepLearning::QLearningSolverParameter* qlearningsolverparameter_;
  friend void  protobuf_AddDesc_DeepLearning_2eproto();
  friend void protobuf_AssignDesc_DeepLearning_2eproto();
  friend void protobuf_ShutdownFile_DeepLearning_2eproto();

  void InitAsDefaultInstance();
  static ReinforcementLearningParameter* default_instance_;
};
// -------------------------------------------------------------------

class LayerStructParameter : public ::google::protobuf::Message {
 public:
  LayerStructParameter();
  virtual ~LayerStructParameter();

  LayerStructParameter(const LayerStructParameter& from);

  inline LayerStructParameter& operator=(const LayerStructParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerStructParameter& default_instance();

  void Swap(LayerStructParameter* other);

  // implements Message ----------------------------------------------

  LayerStructParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerStructParameter& from);
  void MergeFrom(const LayerStructParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 inputDim = 1;
  inline bool has_inputdim() const;
  inline void clear_inputdim();
  static const int kInputDimFieldNumber = 1;
  inline ::google::protobuf::int32 inputdim() const;
  inline void set_inputdim(::google::protobuf::int32 value);

  // optional int32 outputDim = 2;
  inline bool has_outputdim() const;
  inline void clear_outputdim();
  static const int kOutputDimFieldNumber = 2;
  inline ::google::protobuf::int32 outputdim() const;
  inline void set_outputdim(::google::protobuf::int32 value);

  // optional .DeepLearning.NeuralNetParameter.ActivationType activationType = 3;
  inline bool has_activationtype() const;
  inline void clear_activationtype();
  static const int kActivationTypeFieldNumber = 3;
  inline ::DeepLearning::NeuralNetParameter_ActivationType activationtype() const;
  inline void set_activationtype(::DeepLearning::NeuralNetParameter_ActivationType value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional .DeepLearning.NeuralNetInitializerParameter init_W = 103;
  inline bool has_init_w() const;
  inline void clear_init_w();
  static const int kInitWFieldNumber = 103;
  inline const ::DeepLearning::NeuralNetInitializerParameter& init_w() const;
  inline ::DeepLearning::NeuralNetInitializerParameter* mutable_init_w();
  inline ::DeepLearning::NeuralNetInitializerParameter* release_init_w();
  inline void set_allocated_init_w(::DeepLearning::NeuralNetInitializerParameter* init_w);

  // optional .DeepLearning.NeuralNetInitializerParameter init_B = 104;
  inline bool has_init_b() const;
  inline void clear_init_b();
  static const int kInitBFieldNumber = 104;
  inline const ::DeepLearning::NeuralNetInitializerParameter& init_b() const;
  inline ::DeepLearning::NeuralNetInitializerParameter* mutable_init_b();
  inline ::DeepLearning::NeuralNetInitializerParameter* release_init_b();
  inline void set_allocated_init_b(::DeepLearning::NeuralNetInitializerParameter* init_b);

  // optional .DeepLearning.NeuralNetInitializerParameter init_W_one = 105;
  inline bool has_init_w_one() const;
  inline void clear_init_w_one();
  static const int kInitWOneFieldNumber = 105;
  inline const ::DeepLearning::NeuralNetInitializerParameter& init_w_one() const;
  inline ::DeepLearning::NeuralNetInitializerParameter* mutable_init_w_one();
  inline ::DeepLearning::NeuralNetInitializerParameter* release_init_w_one();
  inline void set_allocated_init_w_one(::DeepLearning::NeuralNetInitializerParameter* init_w_one);

  // optional .DeepLearning.NeuralNetInitializerParameter init_W_two = 106;
  inline bool has_init_w_two() const;
  inline void clear_init_w_two();
  static const int kInitWTwoFieldNumber = 106;
  inline const ::DeepLearning::NeuralNetInitializerParameter& init_w_two() const;
  inline ::DeepLearning::NeuralNetInitializerParameter* mutable_init_w_two();
  inline ::DeepLearning::NeuralNetInitializerParameter* release_init_w_two();
  inline void set_allocated_init_w_two(::DeepLearning::NeuralNetInitializerParameter* init_w_two);

  // @@protoc_insertion_point(class_scope:DeepLearning.LayerStructParameter)
 private:
  inline void set_has_inputdim();
  inline void clear_has_inputdim();
  inline void set_has_outputdim();
  inline void clear_has_outputdim();
  inline void set_has_activationtype();
  inline void clear_has_activationtype();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_init_w();
  inline void clear_has_init_w();
  inline void set_has_init_b();
  inline void clear_has_init_b();
  inline void set_has_init_w_one();
  inline void clear_has_init_w_one();
  inline void set_has_init_w_two();
  inline void clear_has_init_w_two();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 inputdim_;
  ::google::protobuf::int32 outputdim_;
  ::std::string* name_;
  ::std::string* type_;
  ::DeepLearning::NeuralNetInitializerParameter* init_w_;
  ::DeepLearning::NeuralNetInitializerParameter* init_b_;
  ::DeepLearning::NeuralNetInitializerParameter* init_w_one_;
  ::DeepLearning::NeuralNetInitializerParameter* init_w_two_;
  int activationtype_;
  friend void  protobuf_AddDesc_DeepLearning_2eproto();
  friend void protobuf_AssignDesc_DeepLearning_2eproto();
  friend void protobuf_ShutdownFile_DeepLearning_2eproto();

  void InitAsDefaultInstance();
  static LayerStructParameter* default_instance_;
};
// -------------------------------------------------------------------

class RNNStructParameter : public ::google::protobuf::Message {
 public:
  RNNStructParameter();
  virtual ~RNNStructParameter();

  RNNStructParameter(const RNNStructParameter& from);

  inline RNNStructParameter& operator=(const RNNStructParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RNNStructParameter& default_instance();

  void Swap(RNNStructParameter* other);

  // implements Message ----------------------------------------------

  RNNStructParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RNNStructParameter& from);
  void MergeFrom(const RNNStructParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 numRecurrLayers = 1;
  inline bool has_numrecurrlayers() const;
  inline void clear_numrecurrlayers();
  static const int kNumRecurrLayersFieldNumber = 1;
  inline ::google::protobuf::int32 numrecurrlayers() const;
  inline void set_numrecurrlayers(::google::protobuf::int32 value);

  // optional int32 recurrLayerInputDim = 2;
  inline bool has_recurrlayerinputdim() const;
  inline void clear_recurrlayerinputdim();
  static const int kRecurrLayerInputDimFieldNumber = 2;
  inline ::google::protobuf::int32 recurrlayerinputdim() const;
  inline void set_recurrlayerinputdim(::google::protobuf::int32 value);

  // optional int32 recurrLayerOutputDim = 3;
  inline bool has_recurrlayeroutputdim() const;
  inline void clear_recurrlayeroutputdim();
  static const int kRecurrLayerOutputDimFieldNumber = 3;
  inline ::google::protobuf::int32 recurrlayeroutputdim() const;
  inline void set_recurrlayeroutputdim(::google::protobuf::int32 value);

  // optional int32 inputDim = 4;
  inline bool has_inputdim() const;
  inline void clear_inputdim();
  static const int kInputDimFieldNumber = 4;
  inline ::google::protobuf::int32 inputdim() const;
  inline void set_inputdim(::google::protobuf::int32 value);

  // optional .DeepLearning.NeuralNetParameter.ActivationType activationType = 6;
  inline bool has_activationtype() const;
  inline void clear_activationtype();
  static const int kActivationTypeFieldNumber = 6;
  inline ::DeepLearning::NeuralNetParameter_ActivationType activationtype() const;
  inline void set_activationtype(::DeepLearning::NeuralNetParameter_ActivationType value);

  // optional .DeepLearning.NeuralNetInitializerParameter init_W_one = 103;
  inline bool has_init_w_one() const;
  inline void clear_init_w_one();
  static const int kInitWOneFieldNumber = 103;
  inline const ::DeepLearning::NeuralNetInitializerParameter& init_w_one() const;
  inline ::DeepLearning::NeuralNetInitializerParameter* mutable_init_w_one();
  inline ::DeepLearning::NeuralNetInitializerParameter* release_init_w_one();
  inline void set_allocated_init_w_one(::DeepLearning::NeuralNetInitializerParameter* init_w_one);

  // optional .DeepLearning.NeuralNetInitializerParameter init_B = 104;
  inline bool has_init_b() const;
  inline void clear_init_b();
  static const int kInitBFieldNumber = 104;
  inline const ::DeepLearning::NeuralNetInitializerParameter& init_b() const;
  inline ::DeepLearning::NeuralNetInitializerParameter* mutable_init_b();
  inline ::DeepLearning::NeuralNetInitializerParameter* release_init_b();
  inline void set_allocated_init_b(::DeepLearning::NeuralNetInitializerParameter* init_b);

  // optional .DeepLearning.NeuralNetInitializerParameter init_W_two = 105;
  inline bool has_init_w_two() const;
  inline void clear_init_w_two();
  static const int kInitWTwoFieldNumber = 105;
  inline const ::DeepLearning::NeuralNetInitializerParameter& init_w_two() const;
  inline ::DeepLearning::NeuralNetInitializerParameter* mutable_init_w_two();
  inline ::DeepLearning::NeuralNetInitializerParameter* release_init_w_two();
  inline void set_allocated_init_w_two(::DeepLearning::NeuralNetInitializerParameter* init_w_two);

  // @@protoc_insertion_point(class_scope:DeepLearning.RNNStructParameter)
 private:
  inline void set_has_numrecurrlayers();
  inline void clear_has_numrecurrlayers();
  inline void set_has_recurrlayerinputdim();
  inline void clear_has_recurrlayerinputdim();
  inline void set_has_recurrlayeroutputdim();
  inline void clear_has_recurrlayeroutputdim();
  inline void set_has_inputdim();
  inline void clear_has_inputdim();
  inline void set_has_activationtype();
  inline void clear_has_activationtype();
  inline void set_has_init_w_one();
  inline void clear_has_init_w_one();
  inline void set_has_init_b();
  inline void clear_has_init_b();
  inline void set_has_init_w_two();
  inline void clear_has_init_w_two();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 numrecurrlayers_;
  ::google::protobuf::int32 recurrlayerinputdim_;
  ::google::protobuf::int32 recurrlayeroutputdim_;
  ::google::protobuf::int32 inputdim_;
  ::DeepLearning::NeuralNetInitializerParameter* init_w_one_;
  ::DeepLearning::NeuralNetInitializerParameter* init_b_;
  ::DeepLearning::NeuralNetInitializerParameter* init_w_two_;
  int activationtype_;
  friend void  protobuf_AddDesc_DeepLearning_2eproto();
  friend void protobuf_AssignDesc_DeepLearning_2eproto();
  friend void protobuf_ShutdownFile_DeepLearning_2eproto();

  void InitAsDefaultInstance();
  static RNNStructParameter* default_instance_;
};
// -------------------------------------------------------------------

class NeuralNetInitializerParameter : public ::google::protobuf::Message {
 public:
  NeuralNetInitializerParameter();
  virtual ~NeuralNetInitializerParameter();

  NeuralNetInitializerParameter(const NeuralNetInitializerParameter& from);

  inline NeuralNetInitializerParameter& operator=(const NeuralNetInitializerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NeuralNetInitializerParameter& default_instance();

  void Swap(NeuralNetInitializerParameter* other);

  // implements Message ----------------------------------------------

  NeuralNetInitializerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NeuralNetInitializerParameter& from);
  void MergeFrom(const NeuralNetInitializerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NeuralNetInitializerParameter_InitializerType InitializerType;
  static const InitializerType custom = NeuralNetInitializerParameter_InitializerType_custom;
  static const InitializerType identity = NeuralNetInitializerParameter_InitializerType_identity;
  static const InitializerType zero = NeuralNetInitializerParameter_InitializerType_zero;
  static const InitializerType normal = NeuralNetInitializerParameter_InitializerType_normal;
  static const InitializerType glorot_uniform = NeuralNetInitializerParameter_InitializerType_glorot_uniform;
  static const InitializerType IRNN = NeuralNetInitializerParameter_InitializerType_IRNN;
  static const InitializerType orthogonal = NeuralNetInitializerParameter_InitializerType_orthogonal;
  static inline bool InitializerType_IsValid(int value) {
    return NeuralNetInitializerParameter_InitializerType_IsValid(value);
  }
  static const InitializerType InitializerType_MIN =
    NeuralNetInitializerParameter_InitializerType_InitializerType_MIN;
  static const InitializerType InitializerType_MAX =
    NeuralNetInitializerParameter_InitializerType_InitializerType_MAX;
  static const int InitializerType_ARRAYSIZE =
    NeuralNetInitializerParameter_InitializerType_InitializerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  InitializerType_descriptor() {
    return NeuralNetInitializerParameter_InitializerType_descriptor();
  }
  static inline const ::std::string& InitializerType_Name(InitializerType value) {
    return NeuralNetInitializerParameter_InitializerType_Name(value);
  }
  static inline bool InitializerType_Parse(const ::std::string& name,
      InitializerType* value) {
    return NeuralNetInitializerParameter_InitializerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double normal_std = 1;
  inline bool has_normal_std() const;
  inline void clear_normal_std();
  static const int kNormalStdFieldNumber = 1;
  inline double normal_std() const;
  inline void set_normal_std(double value);

  // optional double normal_mean = 2;
  inline bool has_normal_mean() const;
  inline void clear_normal_mean();
  static const int kNormalMeanFieldNumber = 2;
  inline double normal_mean() const;
  inline void set_normal_mean(double value);

  // optional .DeepLearning.NeuralNetInitializerParameter.InitializerType initializerType = 3;
  inline bool has_initializertype() const;
  inline void clear_initializertype();
  static const int kInitializerTypeFieldNumber = 3;
  inline ::DeepLearning::NeuralNetInitializerParameter_InitializerType initializertype() const;
  inline void set_initializertype(::DeepLearning::NeuralNetInitializerParameter_InitializerType value);

  // @@protoc_insertion_point(class_scope:DeepLearning.NeuralNetInitializerParameter)
 private:
  inline void set_has_normal_std();
  inline void clear_has_normal_std();
  inline void set_has_normal_mean();
  inline void clear_has_normal_mean();
  inline void set_has_initializertype();
  inline void clear_has_initializertype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double normal_std_;
  double normal_mean_;
  int initializertype_;
  friend void  protobuf_AddDesc_DeepLearning_2eproto();
  friend void protobuf_AssignDesc_DeepLearning_2eproto();
  friend void protobuf_ShutdownFile_DeepLearning_2eproto();

  void InitAsDefaultInstance();
  static NeuralNetInitializerParameter* default_instance_;
};
// -------------------------------------------------------------------

class NeuralNetTrainingParameter : public ::google::protobuf::Message {
 public:
  NeuralNetTrainingParameter();
  virtual ~NeuralNetTrainingParameter();

  NeuralNetTrainingParameter(const NeuralNetTrainingParameter& from);

  inline NeuralNetTrainingParameter& operator=(const NeuralNetTrainingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NeuralNetTrainingParameter& default_instance();

  void Swap(NeuralNetTrainingParameter* other);

  // implements Message ----------------------------------------------

  NeuralNetTrainingParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NeuralNetTrainingParameter& from);
  void MergeFrom(const NeuralNetTrainingParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NeuralNetTrainingParameter_TrainerType TrainerType;
  static const TrainerType SGD = NeuralNetTrainingParameter_TrainerType_SGD;
  static const TrainerType RMSProp = NeuralNetTrainingParameter_TrainerType_RMSProp;
  static const TrainerType SGDRNN = NeuralNetTrainingParameter_TrainerType_SGDRNN;
  static inline bool TrainerType_IsValid(int value) {
    return NeuralNetTrainingParameter_TrainerType_IsValid(value);
  }
  static const TrainerType TrainerType_MIN =
    NeuralNetTrainingParameter_TrainerType_TrainerType_MIN;
  static const TrainerType TrainerType_MAX =
    NeuralNetTrainingParameter_TrainerType_TrainerType_MAX;
  static const int TrainerType_ARRAYSIZE =
    NeuralNetTrainingParameter_TrainerType_TrainerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrainerType_descriptor() {
    return NeuralNetTrainingParameter_TrainerType_descriptor();
  }
  static inline const ::std::string& TrainerType_Name(TrainerType value) {
    return NeuralNetTrainingParameter_TrainerType_Name(value);
  }
  static inline bool TrainerType_Parse(const ::std::string& name,
      TrainerType* value) {
    return NeuralNetTrainingParameter_TrainerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double learningRate = 1;
  inline bool has_learningrate() const;
  inline void clear_learningrate();
  static const int kLearningRateFieldNumber = 1;
  inline double learningrate() const;
  inline void set_learningrate(double value);

  // optional int32 maxIter = 2;
  inline bool has_maxiter() const;
  inline void clear_maxiter();
  static const int kMaxIterFieldNumber = 2;
  inline ::google::protobuf::int32 maxiter() const;
  inline void set_maxiter(::google::protobuf::int32 value);

  // optional int32 miniBatchSize = 3;
  inline bool has_minibatchsize() const;
  inline void clear_minibatchsize();
  static const int kMiniBatchSizeFieldNumber = 3;
  inline ::google::protobuf::int32 minibatchsize() const;
  inline void set_minibatchsize(::google::protobuf::int32 value);

  // optional int32 NEpoch = 4;
  inline bool has_nepoch() const;
  inline void clear_nepoch();
  static const int kNEpochFieldNumber = 4;
  inline ::google::protobuf::int32 nepoch() const;
  inline void set_nepoch(::google::protobuf::int32 value);

  // optional double epi = 5 [default = 1e-06];
  inline bool has_epi() const;
  inline void clear_epi();
  static const int kEpiFieldNumber = 5;
  inline double epi() const;
  inline void set_epi(double value);

  // optional .DeepLearning.NeuralNetTrainingParameter.TrainerType trainerType = 6 [default = SGD];
  inline bool has_trainertype() const;
  inline void clear_trainertype();
  static const int kTrainerTypeFieldNumber = 6;
  inline ::DeepLearning::NeuralNetTrainingParameter_TrainerType trainertype() const;
  inline void set_trainertype(::DeepLearning::NeuralNetTrainingParameter_TrainerType value);

  // optional double decayRate = 7 [default = 10];
  inline bool has_decayrate() const;
  inline void clear_decayrate();
  static const int kDecayRateFieldNumber = 7;
  inline double decayrate() const;
  inline void set_decayrate(double value);

  // optional double momentum = 8 [default = 0.9];
  inline bool has_momentum() const;
  inline void clear_momentum();
  static const int kMomentumFieldNumber = 8;
  inline double momentum() const;
  inline void set_momentum(double value);

  // optional bool verbose = 101 [default = true];
  inline bool has_verbose() const;
  inline void clear_verbose();
  static const int kVerboseFieldNumber = 101;
  inline bool verbose() const;
  inline void set_verbose(bool value);

  // optional int32 printInfoFrequency = 10 [default = 1];
  inline bool has_printinfofrequency() const;
  inline void clear_printinfofrequency();
  static const int kPrintInfoFrequencyFieldNumber = 10;
  inline ::google::protobuf::int32 printinfofrequency() const;
  inline void set_printinfofrequency(::google::protobuf::int32 value);

  // optional bool clipFlag = 11 [default = false];
  inline bool has_clipflag() const;
  inline void clear_clipflag();
  static const int kClipFlagFieldNumber = 11;
  inline bool clipflag() const;
  inline void set_clipflag(bool value);

  // optional double clipThreshold = 12 [default = 1];
  inline bool has_clipthreshold() const;
  inline void clear_clipthreshold();
  static const int kClipThresholdFieldNumber = 12;
  inline double clipthreshold() const;
  inline void set_clipthreshold(double value);

  // optional double RMSProp_rho = 13 [default = 0.9];
  inline bool has_rmsprop_rho() const;
  inline void clear_rmsprop_rho();
  static const int kRMSPropRhoFieldNumber = 13;
  inline double rmsprop_rho() const;
  inline void set_rmsprop_rho(double value);

  // optional bool showGradNorm = 102 [default = false];
  inline bool has_showgradnorm() const;
  inline void clear_showgradnorm();
  static const int kShowGradNormFieldNumber = 102;
  inline bool showgradnorm() const;
  inline void set_showgradnorm(bool value);

  // optional bool RNNScanFlag = 103 [default = false];
  inline bool has_rnnscanflag() const;
  inline void clear_rnnscanflag();
  static const int kRNNScanFlagFieldNumber = 103;
  inline bool rnnscanflag() const;
  inline void set_rnnscanflag(bool value);

  // optional int32 RNNScanStep = 104 [default = 1];
  inline bool has_rnnscanstep() const;
  inline void clear_rnnscanstep();
  static const int kRNNScanStepFieldNumber = 104;
  inline ::google::protobuf::int32 rnnscanstep() const;
  inline void set_rnnscanstep(::google::protobuf::int32 value);

  // optional int32 RNNTruncateLength = 105 [default = 10];
  inline bool has_rnntruncatelength() const;
  inline void clear_rnntruncatelength();
  static const int kRNNTruncateLengthFieldNumber = 105;
  inline ::google::protobuf::int32 rnntruncatelength() const;
  inline void set_rnntruncatelength(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DeepLearning.NeuralNetTrainingParameter)
 private:
  inline void set_has_learningrate();
  inline void clear_has_learningrate();
  inline void set_has_maxiter();
  inline void clear_has_maxiter();
  inline void set_has_minibatchsize();
  inline void clear_has_minibatchsize();
  inline void set_has_nepoch();
  inline void clear_has_nepoch();
  inline void set_has_epi();
  inline void clear_has_epi();
  inline void set_has_trainertype();
  inline void clear_has_trainertype();
  inline void set_has_decayrate();
  inline void clear_has_decayrate();
  inline void set_has_momentum();
  inline void clear_has_momentum();
  inline void set_has_verbose();
  inline void clear_has_verbose();
  inline void set_has_printinfofrequency();
  inline void clear_has_printinfofrequency();
  inline void set_has_clipflag();
  inline void clear_has_clipflag();
  inline void set_has_clipthreshold();
  inline void clear_has_clipthreshold();
  inline void set_has_rmsprop_rho();
  inline void clear_has_rmsprop_rho();
  inline void set_has_showgradnorm();
  inline void clear_has_showgradnorm();
  inline void set_has_rnnscanflag();
  inline void clear_has_rnnscanflag();
  inline void set_has_rnnscanstep();
  inline void clear_has_rnnscanstep();
  inline void set_has_rnntruncatelength();
  inline void clear_has_rnntruncatelength();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double learningrate_;
  ::google::protobuf::int32 maxiter_;
  ::google::protobuf::int32 minibatchsize_;
  double epi_;
  ::google::protobuf::int32 nepoch_;
  int trainertype_;
  double decayrate_;
  double momentum_;
  ::google::protobuf::int32 printinfofrequency_;
  bool verbose_;
  bool clipflag_;
  bool showgradnorm_;
  bool rnnscanflag_;
  double clipthreshold_;
  double rmsprop_rho_;
  ::google::protobuf::int32 rnnscanstep_;
  ::google::protobuf::int32 rnntruncatelength_;
  friend void  protobuf_AddDesc_DeepLearning_2eproto();
  friend void protobuf_AssignDesc_DeepLearning_2eproto();
  friend void protobuf_ShutdownFile_DeepLearning_2eproto();

  void InitAsDefaultInstance();
  static NeuralNetTrainingParameter* default_instance_;
};
// -------------------------------------------------------------------

class QLearningSolverParameter : public ::google::protobuf::Message {
 public:
  QLearningSolverParameter();
  virtual ~QLearningSolverParameter();

  QLearningSolverParameter(const QLearningSolverParameter& from);

  inline QLearningSolverParameter& operator=(const QLearningSolverParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QLearningSolverParameter& default_instance();

  void Swap(QLearningSolverParameter* other);

  // implements Message ----------------------------------------------

  QLearningSolverParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QLearningSolverParameter& from);
  void MergeFrom(const QLearningSolverParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 numTrainingEpisodes = 1;
  inline bool has_numtrainingepisodes() const;
  inline void clear_numtrainingepisodes();
  static const int kNumTrainingEpisodesFieldNumber = 1;
  inline ::google::protobuf::int32 numtrainingepisodes() const;
  inline void set_numtrainingepisodes(::google::protobuf::int32 value);

  // optional double learningRate = 2 [default = 0.1];
  inline bool has_learningrate() const;
  inline void clear_learningrate();
  static const int kLearningRateFieldNumber = 2;
  inline double learningrate() const;
  inline void set_learningrate(double value);

  // optional double epsilon = 3 [default = 0.95];
  inline bool has_epsilon() const;
  inline void clear_epsilon();
  static const int kEpsilonFieldNumber = 3;
  inline double epsilon() const;
  inline void set_epsilon(double value);

  // optional int32 EpisodeLength = 4;
  inline bool has_episodelength() const;
  inline void clear_episodelength();
  static const int kEpisodeLengthFieldNumber = 4;
  inline ::google::protobuf::int32 episodelength() const;
  inline void set_episodelength(::google::protobuf::int32 value);

  // optional double discount = 5 [default = 0.95];
  inline bool has_discount() const;
  inline void clear_discount();
  static const int kDiscountFieldNumber = 5;
  inline double discount() const;
  inline void set_discount(double value);

  // optional int32 numEpisodesBeforeTraining = 6;
  inline bool has_numepisodesbeforetraining() const;
  inline void clear_numepisodesbeforetraining();
  static const int kNumEpisodesBeforeTrainingFieldNumber = 6;
  inline ::google::protobuf::int32 numepisodesbeforetraining() const;
  inline void set_numepisodesbeforetraining(::google::protobuf::int32 value);

  // optional int32 QTableOutputInterval = 7;
  inline bool has_qtableoutputinterval() const;
  inline void clear_qtableoutputinterval();
  static const int kQTableOutputIntervalFieldNumber = 7;
  inline ::google::protobuf::int32 qtableoutputinterval() const;
  inline void set_qtableoutputinterval(::google::protobuf::int32 value);

  // optional int32 controlInterval = 8 [default = 1];
  inline bool has_controlinterval() const;
  inline void clear_controlinterval();
  static const int kControlIntervalFieldNumber = 8;
  inline ::google::protobuf::int32 controlinterval() const;
  inline void set_controlinterval(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DeepLearning.QLearningSolverParameter)
 private:
  inline void set_has_numtrainingepisodes();
  inline void clear_has_numtrainingepisodes();
  inline void set_has_learningrate();
  inline void clear_has_learningrate();
  inline void set_has_epsilon();
  inline void clear_has_epsilon();
  inline void set_has_episodelength();
  inline void clear_has_episodelength();
  inline void set_has_discount();
  inline void clear_has_discount();
  inline void set_has_numepisodesbeforetraining();
  inline void clear_has_numepisodesbeforetraining();
  inline void set_has_qtableoutputinterval();
  inline void clear_has_qtableoutputinterval();
  inline void set_has_controlinterval();
  inline void clear_has_controlinterval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double learningrate_;
  ::google::protobuf::int32 numtrainingepisodes_;
  ::google::protobuf::int32 episodelength_;
  double epsilon_;
  double discount_;
  ::google::protobuf::int32 numepisodesbeforetraining_;
  ::google::protobuf::int32 qtableoutputinterval_;
  ::google::protobuf::int32 controlinterval_;
  friend void  protobuf_AddDesc_DeepLearning_2eproto();
  friend void protobuf_AssignDesc_DeepLearning_2eproto();
  friend void protobuf_ShutdownFile_DeepLearning_2eproto();

  void InitAsDefaultInstance();
  static QLearningSolverParameter* default_instance_;
};
// ===================================================================


// ===================================================================

// NeuralNetParameter

// optional string name = 1;
inline bool NeuralNetParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NeuralNetParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NeuralNetParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NeuralNetParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NeuralNetParameter::name() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetParameter.name)
  return *name_;
}
inline void NeuralNetParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetParameter.name)
}
inline void NeuralNetParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:DeepLearning.NeuralNetParameter.name)
}
inline void NeuralNetParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DeepLearning.NeuralNetParameter.name)
}
inline ::std::string* NeuralNetParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DeepLearning.NeuralNetParameter.name)
  return name_;
}
inline ::std::string* NeuralNetParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NeuralNetParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DeepLearning.NeuralNetParameter.name)
}

// optional string type = 2;
inline bool NeuralNetParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NeuralNetParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NeuralNetParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NeuralNetParameter::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& NeuralNetParameter::type() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetParameter.type)
  return *type_;
}
inline void NeuralNetParameter::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetParameter.type)
}
inline void NeuralNetParameter::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:DeepLearning.NeuralNetParameter.type)
}
inline void NeuralNetParameter::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DeepLearning.NeuralNetParameter.type)
}
inline ::std::string* NeuralNetParameter::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DeepLearning.NeuralNetParameter.type)
  return type_;
}
inline ::std::string* NeuralNetParameter::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NeuralNetParameter::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DeepLearning.NeuralNetParameter.type)
}

// repeated .DeepLearning.LayerStructParameter layerStruct = 100;
inline int NeuralNetParameter::layerstruct_size() const {
  return layerstruct_.size();
}
inline void NeuralNetParameter::clear_layerstruct() {
  layerstruct_.Clear();
}
inline const ::DeepLearning::LayerStructParameter& NeuralNetParameter::layerstruct(int index) const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetParameter.layerStruct)
  return layerstruct_.Get(index);
}
inline ::DeepLearning::LayerStructParameter* NeuralNetParameter::mutable_layerstruct(int index) {
  // @@protoc_insertion_point(field_mutable:DeepLearning.NeuralNetParameter.layerStruct)
  return layerstruct_.Mutable(index);
}
inline ::DeepLearning::LayerStructParameter* NeuralNetParameter::add_layerstruct() {
  // @@protoc_insertion_point(field_add:DeepLearning.NeuralNetParameter.layerStruct)
  return layerstruct_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DeepLearning::LayerStructParameter >&
NeuralNetParameter::layerstruct() const {
  // @@protoc_insertion_point(field_list:DeepLearning.NeuralNetParameter.layerStruct)
  return layerstruct_;
}
inline ::google::protobuf::RepeatedPtrField< ::DeepLearning::LayerStructParameter >*
NeuralNetParameter::mutable_layerstruct() {
  // @@protoc_insertion_point(field_mutable_list:DeepLearning.NeuralNetParameter.layerStruct)
  return &layerstruct_;
}

// optional .DeepLearning.NeuralNetTrainingParameter neuralNetTrainingParameter = 101;
inline bool NeuralNetParameter::has_neuralnettrainingparameter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NeuralNetParameter::set_has_neuralnettrainingparameter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NeuralNetParameter::clear_has_neuralnettrainingparameter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NeuralNetParameter::clear_neuralnettrainingparameter() {
  if (neuralnettrainingparameter_ != NULL) neuralnettrainingparameter_->::DeepLearning::NeuralNetTrainingParameter::Clear();
  clear_has_neuralnettrainingparameter();
}
inline const ::DeepLearning::NeuralNetTrainingParameter& NeuralNetParameter::neuralnettrainingparameter() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetParameter.neuralNetTrainingParameter)
  return neuralnettrainingparameter_ != NULL ? *neuralnettrainingparameter_ : *default_instance_->neuralnettrainingparameter_;
}
inline ::DeepLearning::NeuralNetTrainingParameter* NeuralNetParameter::mutable_neuralnettrainingparameter() {
  set_has_neuralnettrainingparameter();
  if (neuralnettrainingparameter_ == NULL) neuralnettrainingparameter_ = new ::DeepLearning::NeuralNetTrainingParameter;
  // @@protoc_insertion_point(field_mutable:DeepLearning.NeuralNetParameter.neuralNetTrainingParameter)
  return neuralnettrainingparameter_;
}
inline ::DeepLearning::NeuralNetTrainingParameter* NeuralNetParameter::release_neuralnettrainingparameter() {
  clear_has_neuralnettrainingparameter();
  ::DeepLearning::NeuralNetTrainingParameter* temp = neuralnettrainingparameter_;
  neuralnettrainingparameter_ = NULL;
  return temp;
}
inline void NeuralNetParameter::set_allocated_neuralnettrainingparameter(::DeepLearning::NeuralNetTrainingParameter* neuralnettrainingparameter) {
  delete neuralnettrainingparameter_;
  neuralnettrainingparameter_ = neuralnettrainingparameter;
  if (neuralnettrainingparameter) {
    set_has_neuralnettrainingparameter();
  } else {
    clear_has_neuralnettrainingparameter();
  }
  // @@protoc_insertion_point(field_set_allocated:DeepLearning.NeuralNetParameter.neuralNetTrainingParameter)
}

// optional .DeepLearning.RNNStructParameter rnnStruct = 102;
inline bool NeuralNetParameter::has_rnnstruct() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NeuralNetParameter::set_has_rnnstruct() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NeuralNetParameter::clear_has_rnnstruct() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NeuralNetParameter::clear_rnnstruct() {
  if (rnnstruct_ != NULL) rnnstruct_->::DeepLearning::RNNStructParameter::Clear();
  clear_has_rnnstruct();
}
inline const ::DeepLearning::RNNStructParameter& NeuralNetParameter::rnnstruct() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetParameter.rnnStruct)
  return rnnstruct_ != NULL ? *rnnstruct_ : *default_instance_->rnnstruct_;
}
inline ::DeepLearning::RNNStructParameter* NeuralNetParameter::mutable_rnnstruct() {
  set_has_rnnstruct();
  if (rnnstruct_ == NULL) rnnstruct_ = new ::DeepLearning::RNNStructParameter;
  // @@protoc_insertion_point(field_mutable:DeepLearning.NeuralNetParameter.rnnStruct)
  return rnnstruct_;
}
inline ::DeepLearning::RNNStructParameter* NeuralNetParameter::release_rnnstruct() {
  clear_has_rnnstruct();
  ::DeepLearning::RNNStructParameter* temp = rnnstruct_;
  rnnstruct_ = NULL;
  return temp;
}
inline void NeuralNetParameter::set_allocated_rnnstruct(::DeepLearning::RNNStructParameter* rnnstruct) {
  delete rnnstruct_;
  rnnstruct_ = rnnstruct;
  if (rnnstruct) {
    set_has_rnnstruct();
  } else {
    clear_has_rnnstruct();
  }
  // @@protoc_insertion_point(field_set_allocated:DeepLearning.NeuralNetParameter.rnnStruct)
}

// -------------------------------------------------------------------

// ReinforcementLearningParameter

// optional .DeepLearning.QLearningSolverParameter qLearningSolverParameter = 100;
inline bool ReinforcementLearningParameter::has_qlearningsolverparameter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReinforcementLearningParameter::set_has_qlearningsolverparameter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReinforcementLearningParameter::clear_has_qlearningsolverparameter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReinforcementLearningParameter::clear_qlearningsolverparameter() {
  if (qlearningsolverparameter_ != NULL) qlearningsolverparameter_->::DeepLearning::QLearningSolverParameter::Clear();
  clear_has_qlearningsolverparameter();
}
inline const ::DeepLearning::QLearningSolverParameter& ReinforcementLearningParameter::qlearningsolverparameter() const {
  // @@protoc_insertion_point(field_get:DeepLearning.ReinforcementLearningParameter.qLearningSolverParameter)
  return qlearningsolverparameter_ != NULL ? *qlearningsolverparameter_ : *default_instance_->qlearningsolverparameter_;
}
inline ::DeepLearning::QLearningSolverParameter* ReinforcementLearningParameter::mutable_qlearningsolverparameter() {
  set_has_qlearningsolverparameter();
  if (qlearningsolverparameter_ == NULL) qlearningsolverparameter_ = new ::DeepLearning::QLearningSolverParameter;
  // @@protoc_insertion_point(field_mutable:DeepLearning.ReinforcementLearningParameter.qLearningSolverParameter)
  return qlearningsolverparameter_;
}
inline ::DeepLearning::QLearningSolverParameter* ReinforcementLearningParameter::release_qlearningsolverparameter() {
  clear_has_qlearningsolverparameter();
  ::DeepLearning::QLearningSolverParameter* temp = qlearningsolverparameter_;
  qlearningsolverparameter_ = NULL;
  return temp;
}
inline void ReinforcementLearningParameter::set_allocated_qlearningsolverparameter(::DeepLearning::QLearningSolverParameter* qlearningsolverparameter) {
  delete qlearningsolverparameter_;
  qlearningsolverparameter_ = qlearningsolverparameter;
  if (qlearningsolverparameter) {
    set_has_qlearningsolverparameter();
  } else {
    clear_has_qlearningsolverparameter();
  }
  // @@protoc_insertion_point(field_set_allocated:DeepLearning.ReinforcementLearningParameter.qLearningSolverParameter)
}

// -------------------------------------------------------------------

// LayerStructParameter

// optional int32 inputDim = 1;
inline bool LayerStructParameter::has_inputdim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerStructParameter::set_has_inputdim() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerStructParameter::clear_has_inputdim() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerStructParameter::clear_inputdim() {
  inputdim_ = 0;
  clear_has_inputdim();
}
inline ::google::protobuf::int32 LayerStructParameter::inputdim() const {
  // @@protoc_insertion_point(field_get:DeepLearning.LayerStructParameter.inputDim)
  return inputdim_;
}
inline void LayerStructParameter::set_inputdim(::google::protobuf::int32 value) {
  set_has_inputdim();
  inputdim_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.LayerStructParameter.inputDim)
}

// optional int32 outputDim = 2;
inline bool LayerStructParameter::has_outputdim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerStructParameter::set_has_outputdim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerStructParameter::clear_has_outputdim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerStructParameter::clear_outputdim() {
  outputdim_ = 0;
  clear_has_outputdim();
}
inline ::google::protobuf::int32 LayerStructParameter::outputdim() const {
  // @@protoc_insertion_point(field_get:DeepLearning.LayerStructParameter.outputDim)
  return outputdim_;
}
inline void LayerStructParameter::set_outputdim(::google::protobuf::int32 value) {
  set_has_outputdim();
  outputdim_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.LayerStructParameter.outputDim)
}

// optional .DeepLearning.NeuralNetParameter.ActivationType activationType = 3;
inline bool LayerStructParameter::has_activationtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LayerStructParameter::set_has_activationtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LayerStructParameter::clear_has_activationtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LayerStructParameter::clear_activationtype() {
  activationtype_ = 1;
  clear_has_activationtype();
}
inline ::DeepLearning::NeuralNetParameter_ActivationType LayerStructParameter::activationtype() const {
  // @@protoc_insertion_point(field_get:DeepLearning.LayerStructParameter.activationType)
  return static_cast< ::DeepLearning::NeuralNetParameter_ActivationType >(activationtype_);
}
inline void LayerStructParameter::set_activationtype(::DeepLearning::NeuralNetParameter_ActivationType value) {
  assert(::DeepLearning::NeuralNetParameter_ActivationType_IsValid(value));
  set_has_activationtype();
  activationtype_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.LayerStructParameter.activationType)
}

// optional string name = 4;
inline bool LayerStructParameter::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LayerStructParameter::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LayerStructParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LayerStructParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LayerStructParameter::name() const {
  // @@protoc_insertion_point(field_get:DeepLearning.LayerStructParameter.name)
  return *name_;
}
inline void LayerStructParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:DeepLearning.LayerStructParameter.name)
}
inline void LayerStructParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:DeepLearning.LayerStructParameter.name)
}
inline void LayerStructParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DeepLearning.LayerStructParameter.name)
}
inline ::std::string* LayerStructParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DeepLearning.LayerStructParameter.name)
  return name_;
}
inline ::std::string* LayerStructParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerStructParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DeepLearning.LayerStructParameter.name)
}

// optional string type = 5;
inline bool LayerStructParameter::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayerStructParameter::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LayerStructParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LayerStructParameter::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& LayerStructParameter::type() const {
  // @@protoc_insertion_point(field_get:DeepLearning.LayerStructParameter.type)
  return *type_;
}
inline void LayerStructParameter::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:DeepLearning.LayerStructParameter.type)
}
inline void LayerStructParameter::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:DeepLearning.LayerStructParameter.type)
}
inline void LayerStructParameter::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DeepLearning.LayerStructParameter.type)
}
inline ::std::string* LayerStructParameter::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:DeepLearning.LayerStructParameter.type)
  return type_;
}
inline ::std::string* LayerStructParameter::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerStructParameter::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:DeepLearning.LayerStructParameter.type)
}

// optional .DeepLearning.NeuralNetInitializerParameter init_W = 103;
inline bool LayerStructParameter::has_init_w() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LayerStructParameter::set_has_init_w() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LayerStructParameter::clear_has_init_w() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LayerStructParameter::clear_init_w() {
  if (init_w_ != NULL) init_w_->::DeepLearning::NeuralNetInitializerParameter::Clear();
  clear_has_init_w();
}
inline const ::DeepLearning::NeuralNetInitializerParameter& LayerStructParameter::init_w() const {
  // @@protoc_insertion_point(field_get:DeepLearning.LayerStructParameter.init_W)
  return init_w_ != NULL ? *init_w_ : *default_instance_->init_w_;
}
inline ::DeepLearning::NeuralNetInitializerParameter* LayerStructParameter::mutable_init_w() {
  set_has_init_w();
  if (init_w_ == NULL) init_w_ = new ::DeepLearning::NeuralNetInitializerParameter;
  // @@protoc_insertion_point(field_mutable:DeepLearning.LayerStructParameter.init_W)
  return init_w_;
}
inline ::DeepLearning::NeuralNetInitializerParameter* LayerStructParameter::release_init_w() {
  clear_has_init_w();
  ::DeepLearning::NeuralNetInitializerParameter* temp = init_w_;
  init_w_ = NULL;
  return temp;
}
inline void LayerStructParameter::set_allocated_init_w(::DeepLearning::NeuralNetInitializerParameter* init_w) {
  delete init_w_;
  init_w_ = init_w;
  if (init_w) {
    set_has_init_w();
  } else {
    clear_has_init_w();
  }
  // @@protoc_insertion_point(field_set_allocated:DeepLearning.LayerStructParameter.init_W)
}

// optional .DeepLearning.NeuralNetInitializerParameter init_B = 104;
inline bool LayerStructParameter::has_init_b() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LayerStructParameter::set_has_init_b() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LayerStructParameter::clear_has_init_b() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LayerStructParameter::clear_init_b() {
  if (init_b_ != NULL) init_b_->::DeepLearning::NeuralNetInitializerParameter::Clear();
  clear_has_init_b();
}
inline const ::DeepLearning::NeuralNetInitializerParameter& LayerStructParameter::init_b() const {
  // @@protoc_insertion_point(field_get:DeepLearning.LayerStructParameter.init_B)
  return init_b_ != NULL ? *init_b_ : *default_instance_->init_b_;
}
inline ::DeepLearning::NeuralNetInitializerParameter* LayerStructParameter::mutable_init_b() {
  set_has_init_b();
  if (init_b_ == NULL) init_b_ = new ::DeepLearning::NeuralNetInitializerParameter;
  // @@protoc_insertion_point(field_mutable:DeepLearning.LayerStructParameter.init_B)
  return init_b_;
}
inline ::DeepLearning::NeuralNetInitializerParameter* LayerStructParameter::release_init_b() {
  clear_has_init_b();
  ::DeepLearning::NeuralNetInitializerParameter* temp = init_b_;
  init_b_ = NULL;
  return temp;
}
inline void LayerStructParameter::set_allocated_init_b(::DeepLearning::NeuralNetInitializerParameter* init_b) {
  delete init_b_;
  init_b_ = init_b;
  if (init_b) {
    set_has_init_b();
  } else {
    clear_has_init_b();
  }
  // @@protoc_insertion_point(field_set_allocated:DeepLearning.LayerStructParameter.init_B)
}

// optional .DeepLearning.NeuralNetInitializerParameter init_W_one = 105;
inline bool LayerStructParameter::has_init_w_one() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LayerStructParameter::set_has_init_w_one() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LayerStructParameter::clear_has_init_w_one() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LayerStructParameter::clear_init_w_one() {
  if (init_w_one_ != NULL) init_w_one_->::DeepLearning::NeuralNetInitializerParameter::Clear();
  clear_has_init_w_one();
}
inline const ::DeepLearning::NeuralNetInitializerParameter& LayerStructParameter::init_w_one() const {
  // @@protoc_insertion_point(field_get:DeepLearning.LayerStructParameter.init_W_one)
  return init_w_one_ != NULL ? *init_w_one_ : *default_instance_->init_w_one_;
}
inline ::DeepLearning::NeuralNetInitializerParameter* LayerStructParameter::mutable_init_w_one() {
  set_has_init_w_one();
  if (init_w_one_ == NULL) init_w_one_ = new ::DeepLearning::NeuralNetInitializerParameter;
  // @@protoc_insertion_point(field_mutable:DeepLearning.LayerStructParameter.init_W_one)
  return init_w_one_;
}
inline ::DeepLearning::NeuralNetInitializerParameter* LayerStructParameter::release_init_w_one() {
  clear_has_init_w_one();
  ::DeepLearning::NeuralNetInitializerParameter* temp = init_w_one_;
  init_w_one_ = NULL;
  return temp;
}
inline void LayerStructParameter::set_allocated_init_w_one(::DeepLearning::NeuralNetInitializerParameter* init_w_one) {
  delete init_w_one_;
  init_w_one_ = init_w_one;
  if (init_w_one) {
    set_has_init_w_one();
  } else {
    clear_has_init_w_one();
  }
  // @@protoc_insertion_point(field_set_allocated:DeepLearning.LayerStructParameter.init_W_one)
}

// optional .DeepLearning.NeuralNetInitializerParameter init_W_two = 106;
inline bool LayerStructParameter::has_init_w_two() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LayerStructParameter::set_has_init_w_two() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LayerStructParameter::clear_has_init_w_two() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LayerStructParameter::clear_init_w_two() {
  if (init_w_two_ != NULL) init_w_two_->::DeepLearning::NeuralNetInitializerParameter::Clear();
  clear_has_init_w_two();
}
inline const ::DeepLearning::NeuralNetInitializerParameter& LayerStructParameter::init_w_two() const {
  // @@protoc_insertion_point(field_get:DeepLearning.LayerStructParameter.init_W_two)
  return init_w_two_ != NULL ? *init_w_two_ : *default_instance_->init_w_two_;
}
inline ::DeepLearning::NeuralNetInitializerParameter* LayerStructParameter::mutable_init_w_two() {
  set_has_init_w_two();
  if (init_w_two_ == NULL) init_w_two_ = new ::DeepLearning::NeuralNetInitializerParameter;
  // @@protoc_insertion_point(field_mutable:DeepLearning.LayerStructParameter.init_W_two)
  return init_w_two_;
}
inline ::DeepLearning::NeuralNetInitializerParameter* LayerStructParameter::release_init_w_two() {
  clear_has_init_w_two();
  ::DeepLearning::NeuralNetInitializerParameter* temp = init_w_two_;
  init_w_two_ = NULL;
  return temp;
}
inline void LayerStructParameter::set_allocated_init_w_two(::DeepLearning::NeuralNetInitializerParameter* init_w_two) {
  delete init_w_two_;
  init_w_two_ = init_w_two;
  if (init_w_two) {
    set_has_init_w_two();
  } else {
    clear_has_init_w_two();
  }
  // @@protoc_insertion_point(field_set_allocated:DeepLearning.LayerStructParameter.init_W_two)
}

// -------------------------------------------------------------------

// RNNStructParameter

// optional int32 numRecurrLayers = 1;
inline bool RNNStructParameter::has_numrecurrlayers() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RNNStructParameter::set_has_numrecurrlayers() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RNNStructParameter::clear_has_numrecurrlayers() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RNNStructParameter::clear_numrecurrlayers() {
  numrecurrlayers_ = 0;
  clear_has_numrecurrlayers();
}
inline ::google::protobuf::int32 RNNStructParameter::numrecurrlayers() const {
  // @@protoc_insertion_point(field_get:DeepLearning.RNNStructParameter.numRecurrLayers)
  return numrecurrlayers_;
}
inline void RNNStructParameter::set_numrecurrlayers(::google::protobuf::int32 value) {
  set_has_numrecurrlayers();
  numrecurrlayers_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.RNNStructParameter.numRecurrLayers)
}

// optional int32 recurrLayerInputDim = 2;
inline bool RNNStructParameter::has_recurrlayerinputdim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RNNStructParameter::set_has_recurrlayerinputdim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RNNStructParameter::clear_has_recurrlayerinputdim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RNNStructParameter::clear_recurrlayerinputdim() {
  recurrlayerinputdim_ = 0;
  clear_has_recurrlayerinputdim();
}
inline ::google::protobuf::int32 RNNStructParameter::recurrlayerinputdim() const {
  // @@protoc_insertion_point(field_get:DeepLearning.RNNStructParameter.recurrLayerInputDim)
  return recurrlayerinputdim_;
}
inline void RNNStructParameter::set_recurrlayerinputdim(::google::protobuf::int32 value) {
  set_has_recurrlayerinputdim();
  recurrlayerinputdim_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.RNNStructParameter.recurrLayerInputDim)
}

// optional int32 recurrLayerOutputDim = 3;
inline bool RNNStructParameter::has_recurrlayeroutputdim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RNNStructParameter::set_has_recurrlayeroutputdim() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RNNStructParameter::clear_has_recurrlayeroutputdim() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RNNStructParameter::clear_recurrlayeroutputdim() {
  recurrlayeroutputdim_ = 0;
  clear_has_recurrlayeroutputdim();
}
inline ::google::protobuf::int32 RNNStructParameter::recurrlayeroutputdim() const {
  // @@protoc_insertion_point(field_get:DeepLearning.RNNStructParameter.recurrLayerOutputDim)
  return recurrlayeroutputdim_;
}
inline void RNNStructParameter::set_recurrlayeroutputdim(::google::protobuf::int32 value) {
  set_has_recurrlayeroutputdim();
  recurrlayeroutputdim_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.RNNStructParameter.recurrLayerOutputDim)
}

// optional int32 inputDim = 4;
inline bool RNNStructParameter::has_inputdim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RNNStructParameter::set_has_inputdim() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RNNStructParameter::clear_has_inputdim() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RNNStructParameter::clear_inputdim() {
  inputdim_ = 0;
  clear_has_inputdim();
}
inline ::google::protobuf::int32 RNNStructParameter::inputdim() const {
  // @@protoc_insertion_point(field_get:DeepLearning.RNNStructParameter.inputDim)
  return inputdim_;
}
inline void RNNStructParameter::set_inputdim(::google::protobuf::int32 value) {
  set_has_inputdim();
  inputdim_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.RNNStructParameter.inputDim)
}

// optional .DeepLearning.NeuralNetParameter.ActivationType activationType = 6;
inline bool RNNStructParameter::has_activationtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RNNStructParameter::set_has_activationtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RNNStructParameter::clear_has_activationtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RNNStructParameter::clear_activationtype() {
  activationtype_ = 1;
  clear_has_activationtype();
}
inline ::DeepLearning::NeuralNetParameter_ActivationType RNNStructParameter::activationtype() const {
  // @@protoc_insertion_point(field_get:DeepLearning.RNNStructParameter.activationType)
  return static_cast< ::DeepLearning::NeuralNetParameter_ActivationType >(activationtype_);
}
inline void RNNStructParameter::set_activationtype(::DeepLearning::NeuralNetParameter_ActivationType value) {
  assert(::DeepLearning::NeuralNetParameter_ActivationType_IsValid(value));
  set_has_activationtype();
  activationtype_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.RNNStructParameter.activationType)
}

// optional .DeepLearning.NeuralNetInitializerParameter init_W_one = 103;
inline bool RNNStructParameter::has_init_w_one() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RNNStructParameter::set_has_init_w_one() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RNNStructParameter::clear_has_init_w_one() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RNNStructParameter::clear_init_w_one() {
  if (init_w_one_ != NULL) init_w_one_->::DeepLearning::NeuralNetInitializerParameter::Clear();
  clear_has_init_w_one();
}
inline const ::DeepLearning::NeuralNetInitializerParameter& RNNStructParameter::init_w_one() const {
  // @@protoc_insertion_point(field_get:DeepLearning.RNNStructParameter.init_W_one)
  return init_w_one_ != NULL ? *init_w_one_ : *default_instance_->init_w_one_;
}
inline ::DeepLearning::NeuralNetInitializerParameter* RNNStructParameter::mutable_init_w_one() {
  set_has_init_w_one();
  if (init_w_one_ == NULL) init_w_one_ = new ::DeepLearning::NeuralNetInitializerParameter;
  // @@protoc_insertion_point(field_mutable:DeepLearning.RNNStructParameter.init_W_one)
  return init_w_one_;
}
inline ::DeepLearning::NeuralNetInitializerParameter* RNNStructParameter::release_init_w_one() {
  clear_has_init_w_one();
  ::DeepLearning::NeuralNetInitializerParameter* temp = init_w_one_;
  init_w_one_ = NULL;
  return temp;
}
inline void RNNStructParameter::set_allocated_init_w_one(::DeepLearning::NeuralNetInitializerParameter* init_w_one) {
  delete init_w_one_;
  init_w_one_ = init_w_one;
  if (init_w_one) {
    set_has_init_w_one();
  } else {
    clear_has_init_w_one();
  }
  // @@protoc_insertion_point(field_set_allocated:DeepLearning.RNNStructParameter.init_W_one)
}

// optional .DeepLearning.NeuralNetInitializerParameter init_B = 104;
inline bool RNNStructParameter::has_init_b() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RNNStructParameter::set_has_init_b() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RNNStructParameter::clear_has_init_b() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RNNStructParameter::clear_init_b() {
  if (init_b_ != NULL) init_b_->::DeepLearning::NeuralNetInitializerParameter::Clear();
  clear_has_init_b();
}
inline const ::DeepLearning::NeuralNetInitializerParameter& RNNStructParameter::init_b() const {
  // @@protoc_insertion_point(field_get:DeepLearning.RNNStructParameter.init_B)
  return init_b_ != NULL ? *init_b_ : *default_instance_->init_b_;
}
inline ::DeepLearning::NeuralNetInitializerParameter* RNNStructParameter::mutable_init_b() {
  set_has_init_b();
  if (init_b_ == NULL) init_b_ = new ::DeepLearning::NeuralNetInitializerParameter;
  // @@protoc_insertion_point(field_mutable:DeepLearning.RNNStructParameter.init_B)
  return init_b_;
}
inline ::DeepLearning::NeuralNetInitializerParameter* RNNStructParameter::release_init_b() {
  clear_has_init_b();
  ::DeepLearning::NeuralNetInitializerParameter* temp = init_b_;
  init_b_ = NULL;
  return temp;
}
inline void RNNStructParameter::set_allocated_init_b(::DeepLearning::NeuralNetInitializerParameter* init_b) {
  delete init_b_;
  init_b_ = init_b;
  if (init_b) {
    set_has_init_b();
  } else {
    clear_has_init_b();
  }
  // @@protoc_insertion_point(field_set_allocated:DeepLearning.RNNStructParameter.init_B)
}

// optional .DeepLearning.NeuralNetInitializerParameter init_W_two = 105;
inline bool RNNStructParameter::has_init_w_two() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RNNStructParameter::set_has_init_w_two() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RNNStructParameter::clear_has_init_w_two() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RNNStructParameter::clear_init_w_two() {
  if (init_w_two_ != NULL) init_w_two_->::DeepLearning::NeuralNetInitializerParameter::Clear();
  clear_has_init_w_two();
}
inline const ::DeepLearning::NeuralNetInitializerParameter& RNNStructParameter::init_w_two() const {
  // @@protoc_insertion_point(field_get:DeepLearning.RNNStructParameter.init_W_two)
  return init_w_two_ != NULL ? *init_w_two_ : *default_instance_->init_w_two_;
}
inline ::DeepLearning::NeuralNetInitializerParameter* RNNStructParameter::mutable_init_w_two() {
  set_has_init_w_two();
  if (init_w_two_ == NULL) init_w_two_ = new ::DeepLearning::NeuralNetInitializerParameter;
  // @@protoc_insertion_point(field_mutable:DeepLearning.RNNStructParameter.init_W_two)
  return init_w_two_;
}
inline ::DeepLearning::NeuralNetInitializerParameter* RNNStructParameter::release_init_w_two() {
  clear_has_init_w_two();
  ::DeepLearning::NeuralNetInitializerParameter* temp = init_w_two_;
  init_w_two_ = NULL;
  return temp;
}
inline void RNNStructParameter::set_allocated_init_w_two(::DeepLearning::NeuralNetInitializerParameter* init_w_two) {
  delete init_w_two_;
  init_w_two_ = init_w_two;
  if (init_w_two) {
    set_has_init_w_two();
  } else {
    clear_has_init_w_two();
  }
  // @@protoc_insertion_point(field_set_allocated:DeepLearning.RNNStructParameter.init_W_two)
}

// -------------------------------------------------------------------

// NeuralNetInitializerParameter

// optional double normal_std = 1;
inline bool NeuralNetInitializerParameter::has_normal_std() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NeuralNetInitializerParameter::set_has_normal_std() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NeuralNetInitializerParameter::clear_has_normal_std() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NeuralNetInitializerParameter::clear_normal_std() {
  normal_std_ = 0;
  clear_has_normal_std();
}
inline double NeuralNetInitializerParameter::normal_std() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetInitializerParameter.normal_std)
  return normal_std_;
}
inline void NeuralNetInitializerParameter::set_normal_std(double value) {
  set_has_normal_std();
  normal_std_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetInitializerParameter.normal_std)
}

// optional double normal_mean = 2;
inline bool NeuralNetInitializerParameter::has_normal_mean() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NeuralNetInitializerParameter::set_has_normal_mean() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NeuralNetInitializerParameter::clear_has_normal_mean() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NeuralNetInitializerParameter::clear_normal_mean() {
  normal_mean_ = 0;
  clear_has_normal_mean();
}
inline double NeuralNetInitializerParameter::normal_mean() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetInitializerParameter.normal_mean)
  return normal_mean_;
}
inline void NeuralNetInitializerParameter::set_normal_mean(double value) {
  set_has_normal_mean();
  normal_mean_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetInitializerParameter.normal_mean)
}

// optional .DeepLearning.NeuralNetInitializerParameter.InitializerType initializerType = 3;
inline bool NeuralNetInitializerParameter::has_initializertype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NeuralNetInitializerParameter::set_has_initializertype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NeuralNetInitializerParameter::clear_has_initializertype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NeuralNetInitializerParameter::clear_initializertype() {
  initializertype_ = 1;
  clear_has_initializertype();
}
inline ::DeepLearning::NeuralNetInitializerParameter_InitializerType NeuralNetInitializerParameter::initializertype() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetInitializerParameter.initializerType)
  return static_cast< ::DeepLearning::NeuralNetInitializerParameter_InitializerType >(initializertype_);
}
inline void NeuralNetInitializerParameter::set_initializertype(::DeepLearning::NeuralNetInitializerParameter_InitializerType value) {
  assert(::DeepLearning::NeuralNetInitializerParameter_InitializerType_IsValid(value));
  set_has_initializertype();
  initializertype_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetInitializerParameter.initializerType)
}

// -------------------------------------------------------------------

// NeuralNetTrainingParameter

// optional double learningRate = 1;
inline bool NeuralNetTrainingParameter::has_learningrate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NeuralNetTrainingParameter::set_has_learningrate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NeuralNetTrainingParameter::clear_has_learningrate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NeuralNetTrainingParameter::clear_learningrate() {
  learningrate_ = 0;
  clear_has_learningrate();
}
inline double NeuralNetTrainingParameter::learningrate() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetTrainingParameter.learningRate)
  return learningrate_;
}
inline void NeuralNetTrainingParameter::set_learningrate(double value) {
  set_has_learningrate();
  learningrate_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetTrainingParameter.learningRate)
}

// optional int32 maxIter = 2;
inline bool NeuralNetTrainingParameter::has_maxiter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NeuralNetTrainingParameter::set_has_maxiter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NeuralNetTrainingParameter::clear_has_maxiter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NeuralNetTrainingParameter::clear_maxiter() {
  maxiter_ = 0;
  clear_has_maxiter();
}
inline ::google::protobuf::int32 NeuralNetTrainingParameter::maxiter() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetTrainingParameter.maxIter)
  return maxiter_;
}
inline void NeuralNetTrainingParameter::set_maxiter(::google::protobuf::int32 value) {
  set_has_maxiter();
  maxiter_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetTrainingParameter.maxIter)
}

// optional int32 miniBatchSize = 3;
inline bool NeuralNetTrainingParameter::has_minibatchsize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NeuralNetTrainingParameter::set_has_minibatchsize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NeuralNetTrainingParameter::clear_has_minibatchsize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NeuralNetTrainingParameter::clear_minibatchsize() {
  minibatchsize_ = 0;
  clear_has_minibatchsize();
}
inline ::google::protobuf::int32 NeuralNetTrainingParameter::minibatchsize() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetTrainingParameter.miniBatchSize)
  return minibatchsize_;
}
inline void NeuralNetTrainingParameter::set_minibatchsize(::google::protobuf::int32 value) {
  set_has_minibatchsize();
  minibatchsize_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetTrainingParameter.miniBatchSize)
}

// optional int32 NEpoch = 4;
inline bool NeuralNetTrainingParameter::has_nepoch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NeuralNetTrainingParameter::set_has_nepoch() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NeuralNetTrainingParameter::clear_has_nepoch() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NeuralNetTrainingParameter::clear_nepoch() {
  nepoch_ = 0;
  clear_has_nepoch();
}
inline ::google::protobuf::int32 NeuralNetTrainingParameter::nepoch() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetTrainingParameter.NEpoch)
  return nepoch_;
}
inline void NeuralNetTrainingParameter::set_nepoch(::google::protobuf::int32 value) {
  set_has_nepoch();
  nepoch_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetTrainingParameter.NEpoch)
}

// optional double epi = 5 [default = 1e-06];
inline bool NeuralNetTrainingParameter::has_epi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NeuralNetTrainingParameter::set_has_epi() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NeuralNetTrainingParameter::clear_has_epi() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NeuralNetTrainingParameter::clear_epi() {
  epi_ = 1e-06;
  clear_has_epi();
}
inline double NeuralNetTrainingParameter::epi() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetTrainingParameter.epi)
  return epi_;
}
inline void NeuralNetTrainingParameter::set_epi(double value) {
  set_has_epi();
  epi_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetTrainingParameter.epi)
}

// optional .DeepLearning.NeuralNetTrainingParameter.TrainerType trainerType = 6 [default = SGD];
inline bool NeuralNetTrainingParameter::has_trainertype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NeuralNetTrainingParameter::set_has_trainertype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NeuralNetTrainingParameter::clear_has_trainertype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NeuralNetTrainingParameter::clear_trainertype() {
  trainertype_ = 1;
  clear_has_trainertype();
}
inline ::DeepLearning::NeuralNetTrainingParameter_TrainerType NeuralNetTrainingParameter::trainertype() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetTrainingParameter.trainerType)
  return static_cast< ::DeepLearning::NeuralNetTrainingParameter_TrainerType >(trainertype_);
}
inline void NeuralNetTrainingParameter::set_trainertype(::DeepLearning::NeuralNetTrainingParameter_TrainerType value) {
  assert(::DeepLearning::NeuralNetTrainingParameter_TrainerType_IsValid(value));
  set_has_trainertype();
  trainertype_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetTrainingParameter.trainerType)
}

// optional double decayRate = 7 [default = 10];
inline bool NeuralNetTrainingParameter::has_decayrate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NeuralNetTrainingParameter::set_has_decayrate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NeuralNetTrainingParameter::clear_has_decayrate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NeuralNetTrainingParameter::clear_decayrate() {
  decayrate_ = 10;
  clear_has_decayrate();
}
inline double NeuralNetTrainingParameter::decayrate() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetTrainingParameter.decayRate)
  return decayrate_;
}
inline void NeuralNetTrainingParameter::set_decayrate(double value) {
  set_has_decayrate();
  decayrate_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetTrainingParameter.decayRate)
}

// optional double momentum = 8 [default = 0.9];
inline bool NeuralNetTrainingParameter::has_momentum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NeuralNetTrainingParameter::set_has_momentum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NeuralNetTrainingParameter::clear_has_momentum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NeuralNetTrainingParameter::clear_momentum() {
  momentum_ = 0.9;
  clear_has_momentum();
}
inline double NeuralNetTrainingParameter::momentum() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetTrainingParameter.momentum)
  return momentum_;
}
inline void NeuralNetTrainingParameter::set_momentum(double value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetTrainingParameter.momentum)
}

// optional bool verbose = 101 [default = true];
inline bool NeuralNetTrainingParameter::has_verbose() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NeuralNetTrainingParameter::set_has_verbose() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NeuralNetTrainingParameter::clear_has_verbose() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NeuralNetTrainingParameter::clear_verbose() {
  verbose_ = true;
  clear_has_verbose();
}
inline bool NeuralNetTrainingParameter::verbose() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetTrainingParameter.verbose)
  return verbose_;
}
inline void NeuralNetTrainingParameter::set_verbose(bool value) {
  set_has_verbose();
  verbose_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetTrainingParameter.verbose)
}

// optional int32 printInfoFrequency = 10 [default = 1];
inline bool NeuralNetTrainingParameter::has_printinfofrequency() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NeuralNetTrainingParameter::set_has_printinfofrequency() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NeuralNetTrainingParameter::clear_has_printinfofrequency() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NeuralNetTrainingParameter::clear_printinfofrequency() {
  printinfofrequency_ = 1;
  clear_has_printinfofrequency();
}
inline ::google::protobuf::int32 NeuralNetTrainingParameter::printinfofrequency() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetTrainingParameter.printInfoFrequency)
  return printinfofrequency_;
}
inline void NeuralNetTrainingParameter::set_printinfofrequency(::google::protobuf::int32 value) {
  set_has_printinfofrequency();
  printinfofrequency_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetTrainingParameter.printInfoFrequency)
}

// optional bool clipFlag = 11 [default = false];
inline bool NeuralNetTrainingParameter::has_clipflag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NeuralNetTrainingParameter::set_has_clipflag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NeuralNetTrainingParameter::clear_has_clipflag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NeuralNetTrainingParameter::clear_clipflag() {
  clipflag_ = false;
  clear_has_clipflag();
}
inline bool NeuralNetTrainingParameter::clipflag() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetTrainingParameter.clipFlag)
  return clipflag_;
}
inline void NeuralNetTrainingParameter::set_clipflag(bool value) {
  set_has_clipflag();
  clipflag_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetTrainingParameter.clipFlag)
}

// optional double clipThreshold = 12 [default = 1];
inline bool NeuralNetTrainingParameter::has_clipthreshold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NeuralNetTrainingParameter::set_has_clipthreshold() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NeuralNetTrainingParameter::clear_has_clipthreshold() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NeuralNetTrainingParameter::clear_clipthreshold() {
  clipthreshold_ = 1;
  clear_has_clipthreshold();
}
inline double NeuralNetTrainingParameter::clipthreshold() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetTrainingParameter.clipThreshold)
  return clipthreshold_;
}
inline void NeuralNetTrainingParameter::set_clipthreshold(double value) {
  set_has_clipthreshold();
  clipthreshold_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetTrainingParameter.clipThreshold)
}

// optional double RMSProp_rho = 13 [default = 0.9];
inline bool NeuralNetTrainingParameter::has_rmsprop_rho() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NeuralNetTrainingParameter::set_has_rmsprop_rho() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NeuralNetTrainingParameter::clear_has_rmsprop_rho() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NeuralNetTrainingParameter::clear_rmsprop_rho() {
  rmsprop_rho_ = 0.9;
  clear_has_rmsprop_rho();
}
inline double NeuralNetTrainingParameter::rmsprop_rho() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetTrainingParameter.RMSProp_rho)
  return rmsprop_rho_;
}
inline void NeuralNetTrainingParameter::set_rmsprop_rho(double value) {
  set_has_rmsprop_rho();
  rmsprop_rho_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetTrainingParameter.RMSProp_rho)
}

// optional bool showGradNorm = 102 [default = false];
inline bool NeuralNetTrainingParameter::has_showgradnorm() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NeuralNetTrainingParameter::set_has_showgradnorm() {
  _has_bits_[0] |= 0x00002000u;
}
inline void NeuralNetTrainingParameter::clear_has_showgradnorm() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void NeuralNetTrainingParameter::clear_showgradnorm() {
  showgradnorm_ = false;
  clear_has_showgradnorm();
}
inline bool NeuralNetTrainingParameter::showgradnorm() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetTrainingParameter.showGradNorm)
  return showgradnorm_;
}
inline void NeuralNetTrainingParameter::set_showgradnorm(bool value) {
  set_has_showgradnorm();
  showgradnorm_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetTrainingParameter.showGradNorm)
}

// optional bool RNNScanFlag = 103 [default = false];
inline bool NeuralNetTrainingParameter::has_rnnscanflag() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void NeuralNetTrainingParameter::set_has_rnnscanflag() {
  _has_bits_[0] |= 0x00004000u;
}
inline void NeuralNetTrainingParameter::clear_has_rnnscanflag() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void NeuralNetTrainingParameter::clear_rnnscanflag() {
  rnnscanflag_ = false;
  clear_has_rnnscanflag();
}
inline bool NeuralNetTrainingParameter::rnnscanflag() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetTrainingParameter.RNNScanFlag)
  return rnnscanflag_;
}
inline void NeuralNetTrainingParameter::set_rnnscanflag(bool value) {
  set_has_rnnscanflag();
  rnnscanflag_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetTrainingParameter.RNNScanFlag)
}

// optional int32 RNNScanStep = 104 [default = 1];
inline bool NeuralNetTrainingParameter::has_rnnscanstep() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void NeuralNetTrainingParameter::set_has_rnnscanstep() {
  _has_bits_[0] |= 0x00008000u;
}
inline void NeuralNetTrainingParameter::clear_has_rnnscanstep() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void NeuralNetTrainingParameter::clear_rnnscanstep() {
  rnnscanstep_ = 1;
  clear_has_rnnscanstep();
}
inline ::google::protobuf::int32 NeuralNetTrainingParameter::rnnscanstep() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetTrainingParameter.RNNScanStep)
  return rnnscanstep_;
}
inline void NeuralNetTrainingParameter::set_rnnscanstep(::google::protobuf::int32 value) {
  set_has_rnnscanstep();
  rnnscanstep_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetTrainingParameter.RNNScanStep)
}

// optional int32 RNNTruncateLength = 105 [default = 10];
inline bool NeuralNetTrainingParameter::has_rnntruncatelength() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void NeuralNetTrainingParameter::set_has_rnntruncatelength() {
  _has_bits_[0] |= 0x00010000u;
}
inline void NeuralNetTrainingParameter::clear_has_rnntruncatelength() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void NeuralNetTrainingParameter::clear_rnntruncatelength() {
  rnntruncatelength_ = 10;
  clear_has_rnntruncatelength();
}
inline ::google::protobuf::int32 NeuralNetTrainingParameter::rnntruncatelength() const {
  // @@protoc_insertion_point(field_get:DeepLearning.NeuralNetTrainingParameter.RNNTruncateLength)
  return rnntruncatelength_;
}
inline void NeuralNetTrainingParameter::set_rnntruncatelength(::google::protobuf::int32 value) {
  set_has_rnntruncatelength();
  rnntruncatelength_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.NeuralNetTrainingParameter.RNNTruncateLength)
}

// -------------------------------------------------------------------

// QLearningSolverParameter

// optional int32 numTrainingEpisodes = 1;
inline bool QLearningSolverParameter::has_numtrainingepisodes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QLearningSolverParameter::set_has_numtrainingepisodes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QLearningSolverParameter::clear_has_numtrainingepisodes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QLearningSolverParameter::clear_numtrainingepisodes() {
  numtrainingepisodes_ = 0;
  clear_has_numtrainingepisodes();
}
inline ::google::protobuf::int32 QLearningSolverParameter::numtrainingepisodes() const {
  // @@protoc_insertion_point(field_get:DeepLearning.QLearningSolverParameter.numTrainingEpisodes)
  return numtrainingepisodes_;
}
inline void QLearningSolverParameter::set_numtrainingepisodes(::google::protobuf::int32 value) {
  set_has_numtrainingepisodes();
  numtrainingepisodes_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.QLearningSolverParameter.numTrainingEpisodes)
}

// optional double learningRate = 2 [default = 0.1];
inline bool QLearningSolverParameter::has_learningrate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QLearningSolverParameter::set_has_learningrate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QLearningSolverParameter::clear_has_learningrate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QLearningSolverParameter::clear_learningrate() {
  learningrate_ = 0.1;
  clear_has_learningrate();
}
inline double QLearningSolverParameter::learningrate() const {
  // @@protoc_insertion_point(field_get:DeepLearning.QLearningSolverParameter.learningRate)
  return learningrate_;
}
inline void QLearningSolverParameter::set_learningrate(double value) {
  set_has_learningrate();
  learningrate_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.QLearningSolverParameter.learningRate)
}

// optional double epsilon = 3 [default = 0.95];
inline bool QLearningSolverParameter::has_epsilon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QLearningSolverParameter::set_has_epsilon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QLearningSolverParameter::clear_has_epsilon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QLearningSolverParameter::clear_epsilon() {
  epsilon_ = 0.95;
  clear_has_epsilon();
}
inline double QLearningSolverParameter::epsilon() const {
  // @@protoc_insertion_point(field_get:DeepLearning.QLearningSolverParameter.epsilon)
  return epsilon_;
}
inline void QLearningSolverParameter::set_epsilon(double value) {
  set_has_epsilon();
  epsilon_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.QLearningSolverParameter.epsilon)
}

// optional int32 EpisodeLength = 4;
inline bool QLearningSolverParameter::has_episodelength() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QLearningSolverParameter::set_has_episodelength() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QLearningSolverParameter::clear_has_episodelength() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QLearningSolverParameter::clear_episodelength() {
  episodelength_ = 0;
  clear_has_episodelength();
}
inline ::google::protobuf::int32 QLearningSolverParameter::episodelength() const {
  // @@protoc_insertion_point(field_get:DeepLearning.QLearningSolverParameter.EpisodeLength)
  return episodelength_;
}
inline void QLearningSolverParameter::set_episodelength(::google::protobuf::int32 value) {
  set_has_episodelength();
  episodelength_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.QLearningSolverParameter.EpisodeLength)
}

// optional double discount = 5 [default = 0.95];
inline bool QLearningSolverParameter::has_discount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QLearningSolverParameter::set_has_discount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QLearningSolverParameter::clear_has_discount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QLearningSolverParameter::clear_discount() {
  discount_ = 0.95;
  clear_has_discount();
}
inline double QLearningSolverParameter::discount() const {
  // @@protoc_insertion_point(field_get:DeepLearning.QLearningSolverParameter.discount)
  return discount_;
}
inline void QLearningSolverParameter::set_discount(double value) {
  set_has_discount();
  discount_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.QLearningSolverParameter.discount)
}

// optional int32 numEpisodesBeforeTraining = 6;
inline bool QLearningSolverParameter::has_numepisodesbeforetraining() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QLearningSolverParameter::set_has_numepisodesbeforetraining() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QLearningSolverParameter::clear_has_numepisodesbeforetraining() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QLearningSolverParameter::clear_numepisodesbeforetraining() {
  numepisodesbeforetraining_ = 0;
  clear_has_numepisodesbeforetraining();
}
inline ::google::protobuf::int32 QLearningSolverParameter::numepisodesbeforetraining() const {
  // @@protoc_insertion_point(field_get:DeepLearning.QLearningSolverParameter.numEpisodesBeforeTraining)
  return numepisodesbeforetraining_;
}
inline void QLearningSolverParameter::set_numepisodesbeforetraining(::google::protobuf::int32 value) {
  set_has_numepisodesbeforetraining();
  numepisodesbeforetraining_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.QLearningSolverParameter.numEpisodesBeforeTraining)
}

// optional int32 QTableOutputInterval = 7;
inline bool QLearningSolverParameter::has_qtableoutputinterval() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QLearningSolverParameter::set_has_qtableoutputinterval() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QLearningSolverParameter::clear_has_qtableoutputinterval() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QLearningSolverParameter::clear_qtableoutputinterval() {
  qtableoutputinterval_ = 0;
  clear_has_qtableoutputinterval();
}
inline ::google::protobuf::int32 QLearningSolverParameter::qtableoutputinterval() const {
  // @@protoc_insertion_point(field_get:DeepLearning.QLearningSolverParameter.QTableOutputInterval)
  return qtableoutputinterval_;
}
inline void QLearningSolverParameter::set_qtableoutputinterval(::google::protobuf::int32 value) {
  set_has_qtableoutputinterval();
  qtableoutputinterval_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.QLearningSolverParameter.QTableOutputInterval)
}

// optional int32 controlInterval = 8 [default = 1];
inline bool QLearningSolverParameter::has_controlinterval() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QLearningSolverParameter::set_has_controlinterval() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QLearningSolverParameter::clear_has_controlinterval() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QLearningSolverParameter::clear_controlinterval() {
  controlinterval_ = 1;
  clear_has_controlinterval();
}
inline ::google::protobuf::int32 QLearningSolverParameter::controlinterval() const {
  // @@protoc_insertion_point(field_get:DeepLearning.QLearningSolverParameter.controlInterval)
  return controlinterval_;
}
inline void QLearningSolverParameter::set_controlinterval(::google::protobuf::int32 value) {
  set_has_controlinterval();
  controlinterval_ = value;
  // @@protoc_insertion_point(field_set:DeepLearning.QLearningSolverParameter.controlInterval)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DeepLearning

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DeepLearning::NeuralNetParameter_ActivationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DeepLearning::NeuralNetParameter_ActivationType>() {
  return ::DeepLearning::NeuralNetParameter_ActivationType_descriptor();
}
template <> struct is_proto_enum< ::DeepLearning::NeuralNetInitializerParameter_InitializerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DeepLearning::NeuralNetInitializerParameter_InitializerType>() {
  return ::DeepLearning::NeuralNetInitializerParameter_InitializerType_descriptor();
}
template <> struct is_proto_enum< ::DeepLearning::NeuralNetTrainingParameter_TrainerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DeepLearning::NeuralNetTrainingParameter_TrainerType>() {
  return ::DeepLearning::NeuralNetTrainingParameter_TrainerType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DeepLearning_2eproto__INCLUDED
